#-----------------------------------------------------------------
#
#	Freeiris2 -- An Opensource telephony project.
#	Copyright (C) 2005 - 2009, Sun bing.
#	Sun bing <hoowa.sun@gmail.com>
#
#	See http://www.freeiris.org for more information about
#	the Freeiris project.
#
#	This program is free software, distributed under the terms of
#	the GNU General Public License Version 2. See the LICENSE file
#	at the top of the source tree.
#
#	Freeiris2 -- 开源通信系统
#	本程序是自由软件，以GNU组织GPL协议第二版发布。关于授权协议内容
#	请查阅LICENSE文件。
#
#-----------------------------------------------------------------
#
#  freeiris2
#
#  Sun bing <hoowa.sun@gmail.com>
#
# agi://127.0.0.1/sysautomon?type=[caller|callee|queuecallee]&number=[number]
# args:
# type try to match type
# number which number will be?
#
#-----------------------------------------------------------------

# 说明主函数
sub sysautomon_gpl_license(){return("system auto monitor");}


# 主函数
#
# 用于检测当前是否需要启动系统自动录音
#
#
sub sysautomon
{
my	$self = shift;
my	$AGI = $self->{server}{agi};				#Asterisk::AGI object
my	$FRI2CONF = $self->{server}->{fri2conf};	#Freeiris2 general conf
my	$INPUT = $self->{server}{input};			#Extension input
my	$PARAM = $self->{server}{params};			#Call params
my	$DBH = $self->database_pconnect();			#DBI object

#my	$FRI2_SESSIONID = $self->_callsession('action=sysautomon','sysautomon='.$PARAM->{'type'});
my	$MYSESS = $self->_callsession('sysautomon');
my	$FRI2_SESSIONID = $MYSESS->{'FRI2_SESSIONID'};
	$self->_callsession_set($MYSESS->{ACTID},'monitor',$PARAM->{'type'});

my	$CALLFROMWHERE = $AGI->get_variable('FRI2_CALLFROMQUEUE');

	#检测是否启动自动录音
my	($matched_sysautomon,$sth);
	if (defined$PARAM->{'type'} && $PARAM->{'type'} eq 'caller') {
		$sth = $DBH->prepare("select * from sysautomontrigger where recordout = '1' order by cretime desc");
	} elsif (defined$PARAM->{'type'} && $PARAM->{'type'} eq 'queuecallee' || (defined$CALLFROMWHERE && $CALLFROMWHERE  eq '1')) {
		$sth = $DBH->prepare("select * from sysautomontrigger where recordqueue = '1' order by cretime desc");
	} elsif (defined$PARAM->{'type'} && $PARAM->{'type'} eq 'callee') {
		$sth = $DBH->prepare("select * from sysautomontrigger where recordin = '1' order by cretime desc");
	} else {
		exit;
	}
	$sth->execute;
	while (my $row = $sth->fetchrow_hashref()) {
		#解析所有members
		foreach  (split(/\&/,$row->{'members'})) {
			next if ($_ eq '');
			if ($_ eq $PARAM->{'number'}) {
				$matched_sysautomon=$row;
				last;
			}
		}
	}

	#是否启动自动录音
	if (defined $matched_sysautomon) {

	my	(%ast_conf);
		tie %ast_conf, 'Config::IniFiles', ( -file => $FRI2CONF->{general}{asterisketc}.'/asterisk.conf' );

		#检测目录是否存在
	my	$vmfpath = $ast_conf{directories}{astspooldir}.'/monitor/';
		if (!-d$vmfpath) {
			mkdir($vmfpath);
			chmod(0777,$vmfpath);
		}
		$vmfpath .= $matched_sysautomon->{'id'};
		if (!-d$vmfpath) {
			mkdir($vmfpath);
			chmod(0777,$vmfpath);
		}


		#如果是保存总量
		if ($matched_sysautomon->{'keepfortype'} eq '0') {
		my	$sth = $DBH->prepare("select count(*) from voicefiles where folder = '".
				$matched_sysautomon->{'id'}."' and label = 'sysautomon'");
			$sth->execute;
		my	$row = $sth->fetchrow_arrayref();
			$sth->finish;

			if ($row->[0] >= $matched_sysautomon->{'keepforargs'}) {
				$sth = $DBH->prepare("select * from voicefiles where folder = '".$matched_sysautomon->{'id'}.
					"' and label = 'sysautomon' order by cretime asc limit ".
					($row->[0] - $matched_sysautomon->{'keepforargs'}));
				$sth->execute;
				while (my $eachrow = $sth->fetchrow_hashref()) {
					$DBH->do("delete from voicefiles where id = '".$eachrow->{'id'}."'") 
						or die $self->logfile(4, 'Database Error : '.$DBH->errstr);
					unlink("$vmfpath/".$eachrow->{'filename'}.'.'.$eachrow->{'extname'});
				}
			}

		#如果是保存天数
		} elsif ($matched_sysautomon->{'keepfortype'} eq '1') {
		
		my	$current = time();
		my	$before = $current - (86400 * $matched_sysautomon->{'keepforargs'});
		my	@datetime = localtime($before);
			$datetime[5]+=1900;
			$datetime[4]++;

			$sth = $DBH->prepare("select * from voicefiles where folder = '".$matched_sysautomon->{'id'}.
				"' and label = 'sysautomon' and cretime <= '$datetime[5]-$datetime[4]-$datetime[3] $datetime[2]:$datetime[1]:$datetime[0]'");
			$sth->execute;
			while (my $eachrow = $sth->fetchrow_hashref()) {
				$DBH->do("delete from voicefiles where id = '".$eachrow->{'id'}."'") 
					or die $self->logfile(4, 'Database Error : '.$DBH->errstr);
				unlink("$vmfpath/".$eachrow->{'filename'}.'.'.$eachrow->{'extname'});
			}

		#如果是永久保存,不做任何处理
		}


		#产生自动录音指令
	my	$filename = 'SAM_'.$FRI2_SESSIONID.'_'.time().'_'.int(rand(999));
		#$self->_callsession(undef,'sysautomon_filename='.$filename);
		$self->_callsession_set($MYSESS->{ACTID},'filename',$filename);

		#创建数据库记录
		$DBH->do("insert into voicefiles set ".
			"filename = '".$filename."',".
			"extname = 'WAV',".
			"folder = '".$matched_sysautomon->{'id'}."',".
			"cretime = now(),".
			"description = '',".
			"label = 'sysautomon',".
			"associate = '".$FRI2_SESSIONID."',".
			"args = 'type=".$PARAM->{'type'}."&number=".$PARAM->{'number'}."',".
			"readonly = '0'")
			or die $self->logfile(4, 'Database Error : '.$DBH->errstr);

		$AGI->exec('MixMonitor',"$vmfpath/$filename\.WAV|ab|chmod 777 $vmfpath/$filename\.WAV");
	}

exit;
}
